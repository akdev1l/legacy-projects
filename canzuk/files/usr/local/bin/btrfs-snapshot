#!/usr/bin/env python

from argparse import ArgumentParser
from logging import (
    basicConfig,
    getLogger,
    INFO
)
from os import listdir, path
from subprocess import run
from sys import argv
from time import strftime

basicConfig(
    level=INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = getLogger(path.basename(argv[0]))

def main():

    arg_parser = ArgumentParser()
    arg_parser.add_argument("--instance", help="Passed by systemd, it has the format: ${SRC_PATH}@${SNAPSHOT_PATH}", required=True)
    arg_parser.add_argument("--max", help="Max number of snapshots to keep", default=5, type=int)

    cli_args = arg_parser.parse_args()

    snapshot_max = cli_args.max
    src_path = cli_args.instance.split("@")[0]
    snapshot_path = cli_args.instance.split("@")[-1]

    snapshot_list = get_snapshots(snapshot_path)
    logger.info(f"found {len(snapshot_list)} snapshots")

    snapshots_to_prune = snapshot_list[:-snapshot_max+1]
    logger.info(f"will prune {len(snapshots_to_prune)}")

    remove_snapshots(snapshots_to_prune)
    create_snapshot(src_path, snapshot_path)

def get_snapshots(snapshot_path):
    top_dir = path.dirname(snapshot_path)
    logger.info(f"getting snapshots from {top_dir}")

    subvolumes = listdir(top_dir)
    snapshots = [
        path.join(top_dir, subvolume)
        for subvolume in subvolumes
    ]

    return snapshots
    
def remove_snapshots(snapshots_to_prune):
    for snapshot in snapshots_to_prune:
        remove_snapshot(snapshot)

def remove_snapshot(snapshot):
    logger.info(f"removing snapshot: {snapshot}")
    btrfs_cmd = [
        'btrfs',
        'subvolume',
        'delete',
        snapshot
    ]

    btrfs_run = run(btrfs_cmd, capture_output=True)

    if btrfs_run.returncode != 0:
        logger.error(f"""command failed: '{" ".join(btrfs_cmd)}'""")
        logger.error(btrfs_run.stderr)
        raise Exception("btrfs command failed")

    logger.info(f"snapshot succesfullt removed: {snapshot}")

def create_snapshot(src_path, snapshot_path):
    new_snapshot_path = path.join(snapshot_path, strftime("%Y-%m-%d-%H-%M"))
    logger.info(f"creating snapshot: {src_path} -> {new_snapshot_path}")

    if path.exists(new_snapshot_path):
        logger.warning(f"snapshot path '{snapshot_path}' already exists. skipping.")
        return
    
    btrfs_cmd = [
        'btrfs',
        'subvolume',
        'snapshot',
        src_path,
        new_snapshot_path
    ]

    btrfs_run = run(btrfs_cmd, capture_output=True)

    if btrfs_run.returncode != 0:
        logger.error(f"""command failed: '{" ".join(btrfs_cmd)}'""")
        logger.error(btrfs_run.stderr)
        raise Exception("btrfs command failed")

    logger.info(f"snapshot created {snapshot_path}")


if __name__ == "__main__":
    main()
